"use strict";var e=require("electron"),t=require("child_process"),r=require("os"),o=require("fs"),a=require("path"),n=require("./playable-adapter-core-90454bef.js");function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=i(t),s=i(r);const{exec:c,execSync:d}=l.default;var p={run:function(e,t){return c(e,(function(e,r,o){t&&t(e,r,o)}))},runSync:function(e){try{return{data:d(e).toString(),err:null,stderr:null}}catch(e){return{data:null,err:e.stderr.toString(),stderr:e.stderr.toString()}}}};const u="playable-ads-adapter",f=()=>{const e=`${Editor.Project.path}/.adapterrc`;return o.existsSync(e)?JSON.parse((t=e,o.readFileSync(t).toString(r))):null;var t,r},h=()=>{const e=Editor.Project.path,t="/build",r=f();let o=r?.buildPlatform??"web-mobile";return{projectRootPath:e,projectBuildPath:t,buildPlatform:o,originPkgPath:a.join(e,t,o),adapterBuildConfig:r}},g=()=>{const e=f();return!!e&&(e.skipBuild??!1)};var m=require("path").join(__dirname+"/3x-c1b97169.js");const b=e=>new Promise(((t,r)=>{let o=Editor.App.path;const a=(()=>{const e=s.default.platform();return"win32"===e?"WINDOWS":"darwin"===e?"MAC":e.toUpperCase()})();"MAC"===a?o=o.replace("/Resources/app.asar","/MacOS/CocosCreator"):"WINDOWS"===a?o=(e=>{let t=e;return-1!==t.indexOf("\\")&&(t=t.replace(/\\/g,"/")),t})(o).replace("/resources/app.asar","/CocosCreator.exe"):r(`not support ${a} platform construction`);p.run(`${o} --project ${Editor.Project.path} --build "platform=${e}"`,((e,r,o)=>{console.log(e,r,o),t()})).stdout.on("data",(e=>{console.log(e)}))})),P=async e=>{console.log(`${u} Do pre-build processing`),console.log(`${u} Skip pre-build processing`)},j=e=>new Promise((async(t,r)=>{const{projectRootPath:o,projectBuildPath:i,adapterBuildConfig:l}=h(),s=a.join(o,i);console.info(`${u} Start adaptation, export platform ${e.platform}`);const c=(new Date).getTime(),d=()=>{const e=(new Date).getTime();console.log(`${u} The adaptation is completed, and it takes a total of time ${((e-c)/1e3).toFixed(0)}`),t(!0)},p={buildFolderPath:s,adapterBuildConfig:{...l,buildPlatform:e.platform}};try{const{Worker:e}=require("worker_threads");console.log("Worker is supported, sub-thread adaptation will be enabled");new e(m,{workerData:p}).on("message",(({finished:e,msg:t})=>{var o;e?d():(o=t,console.error("Adaptation failed"),r(o))}))}catch(e){console.log("Does not support Worker, will enable main thread adaptation"),await n.exec3xAdapter(p,{mode:"serial"}),d()}}));exports.BUILDER_NAME=u,exports.builder3x=async()=>{try{const{buildPlatform:t,projectRootPath:r,projectBuildPath:o}=h();console.log(`Start build , export ${t} Tất cả các mạng`);const n=g(),i=a.join(r,o);await P(),n||await b(t),await j({platform:t}),e.shell.openPath(i),console.log("Done Build - Hoàn Tất Build Mạng")}catch(e){console.error(e)}},exports.initBuildFinishedEvent=j,exports.initBuildStartEvent=P;
